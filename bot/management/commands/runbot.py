import asyncio
import random
import re
import traceback
from datetime import datetime
from pprint import pprint
from typing import Any

from django.utils import timezone
from aiogram.client.default import DefaultBotProperties
from aiogram.methods import GetChatMember
from aiogram.utils.serialization import deserialize_telegram_object
from asgiref.sync import sync_to_async
from django.core.management.base import BaseCommand
from aiogram import Bot, Dispatcher, filters, F
from aiogram.client.session.middlewares.request_logging import logger
from django.db.models import Q
import asyncio
import logging
import sys
from os import getenv

from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode, ChatMemberStatus, ChatType
from aiogram.filters import CommandStart, ChatMemberUpdatedFilter, IS_NOT_MEMBER, MEMBER, JOIN_TRANSITION
from aiogram.types import Message, ChatInviteLink, ChatMemberUpdated
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold

from PromotionMaker.models import Post, Button, Chat, PromotionPost, SpamFilterModel
from ChatModerator.settings import API_TOKEN, PROMOTER_TOKEN
from aiogram import Bot, Dispatcher
from aiogram.enums.parse_mode import ParseMode


class Command(BaseCommand):
    help = 'Run bot in polling'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("Bot started!"))
        try:
            main()
        except KeyboardInterrupt:
            self.stdout.write(self.style.NOTICE("Bot stopped!"))


# Bot token can be obtained via https://t.me/BotFather
TOKEN = getenv("BOT_TOKEN")
bot_helper_promoter = Bot(PROMOTER_TOKEN)
# All handlers should be attached to the Router (or Dispatcher)
dp = Dispatcher()
last_promotion_post = {

}
messages_counter = {

}
last_messages = {

}

router = Router()


async def remove_message(message, chat_for_subscribe, subscribe_link):
    try:

        if not message.from_user.is_bot and chat_for_subscribe is not None:
            is_subscribe = await message.bot(GetChatMember(chat_id=chat_for_subscribe, user_id=message.from_user.id))
            if is_subscribe.status is not ChatMemberStatus.CREATOR and is_subscribe.status is not ChatMemberStatus.MEMBER:
                print("sss")
                message_for_delete = await message.answer(
                    f"""<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>, —â–æ–± –≤–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤–∏–¥–∞–ª—è–ª–∏—Å—å –±—É–¥—å-–ª–∞—Å–∫–∞ –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ —á–∞—Ç: <a href="{subscribe_link}">–¢–∏—Å–Ω–∏ —Å—é–¥–∏ —â–æ–± –≤—Å—Ç—É–ø–∏—Ç–∏ –≤ —á–∞—Ç</a> .\n\n<b>–ù–∞—à–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∞ {message.chat.title} –ø–æ—Å—Ç—É–ø–æ–≤–æ —Ä–æ–∑–≤–∏–≤–∞—î—Ç—å—Å—è, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑—Ä–æ—Å—Ç–∞—î, —â–æ–± –≤—ñ–¥—Å—ñ—è—Ç–∏ —Å–ø–∞–º —Ç–∞ –±–æ—Ç—ñ–≤ –º–∏ –ø—ñ–¥–∫–ª—é—á–∏–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞—Ö–∏—Å—Ç—É - –í–∞–º –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤—Å—Ç—É–ø–∏—Ç–∏ –≤ —á–∞—Ç –≤–∫–∞–∑–∞–Ω–∏–π –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ,—â–æ–± –≤–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –≤–∏–¥–∞–ª—è—Ç–∏—Å—è.</b>""",
                    parse_mode=ParseMode.HTML)
                waiting_time = random.randint(3, 10)
                await asyncio.sleep(waiting_time)
                await message.delete()
                await asyncio.sleep(waiting_time)
                await message_for_delete.delete()
    except Exception as e:
        print(e)


async def publish_buttons_post(message, db_chat, chat_id):
    # –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    # –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —á–∞—Ç –≤ –±–∞–∑—ñ, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤—ñ–Ω —î –≤ –±–∞–∑—ñ
    # —è–∫—â–æ —î –≤ –±–∞–∑—ñ —Ç–æ main_post –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –ø–æ—Å—Ç
    # —è–∫—â–æ –Ω–µ–º–∞ —á–∞—Ç—É, —Ç–æ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç –ø–æ—Å—Ç
    try:
        main_post = None
        if db_chat is None:
            main_post = Post.objects.first()
        else:
            try:
                main_post = Post.objects.filter(chat_id=db_chat).first()
                if main_post is None:
                    main_post = Post.objects.first()
            except Exception as e:
                main_post = Post.objects.first()
        post = main_post
        keyboard = InlineKeyboardBuilder()
        buttons: list[Button] = post.get_buttons()
        for buttin in buttons:
            keyboard.row(types.InlineKeyboardButton(text=f"{buttin.title}", url=buttin.url))
        mess = await message.bot.send_message(chat_id, text=post.title, reply_markup=keyboard.as_markup())
        try:
            await message.bot.delete_message(chat_id=chat_id, message_id=last_messages[chat_id])
        except Exception as e:
            pass
        last_messages[chat_id] = mess.message_id
    except Exception as e:
        pass


async def publish_promotion_posts(message, db_chat):
    # –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ä–µ–∫–ª–∞–º–∏
    try:
        #—Å–ø—Ä–æ–±–∞ –∑—É–ø–∏–Ω–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ (—Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º –ø–æ–∫–∏ —â–æ)
        # try:
        #     for i in last_promotion_post.get(message.chat.id, []):
        #         try:
        #             print(i)
        #             await bot_helper_promoter.delete_message(chat_id=message.chat.id, message_id=i)
        #         except Exception as e:
        #             print(e)
        # except Exception as e:
        #     print(e)
        #     pass
        if db_chat is not None:
            now = datetime.now()
            promotion_posts = PromotionPost.objects.filter(
                chat_id=db_chat,
                end_date_promotion__gte=now
            )
            for post in promotion_posts:
                try:
                    mess = await bot_helper_promoter.forward_message(message.chat.id, post.chat_message_id,
                                                                     post.message_id)
                    last_promotion_post[message.chat.id] = last_promotion_post.get(message.chat.id, [])
                    last_promotion_post[message.chat.id].append(mess.message_id)
                except Exception as e:
                    print(e)
                    pass
                random_wait = random.randint(35, 260)
                await asyncio.sleep(random_wait)
    except Exception as e:
        print(e)
        pass


async def spam_filter_search(message):
    #–ø–æ—à—É–∫ —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–ª—ñ–≤
    try:

        words = message.text.lower().split()

        query = Q()

        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        for word in words:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞ —Ü–µ–ª–∏–∫–æ–º
            regex = fr"\b{re.escape(word)}\b"
            query |= Q(black_words__iregex=regex)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π
        exists_bad_word = SpamFilterModel.objects.filter(query).exists()
        if exists_bad_word:
            print("Spam filter")
            exists_exception_user = SpamFilterModel.objects.filter(
                except_ids__contains=str(message.from_user.id)
            ).exists()
            if not exists_exception_user:
                mess_warning = await bot_helper_promoter.send_message(chat_id=message.chat.id,
                                                                      text="–í–æ—É, —Å—Ö–æ–∂–µ, —â–æ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—ñ–¥–ø–∞–¥–∞—î –ø—ñ–¥ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–ª–∞—Ç–Ω–∏—Ö —Ç–∞ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ:\n–ù–∞ –ø–ª–∞—Ç–Ω—ñ–π –æ—Å–Ω–æ–≤—ñ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è:\n- –†–µ–∫–ª–∞–º–∞ –º–∞–≥–∞–∑–∏–Ω—ñ–≤, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ —Ç–∞ –ø–æ—Å–ª—É–≥.\n- –ü—Ä–æ–¥–∞–∂—ñ.\n- –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.\n- –ë—Ä–∞—á–∫–∞, –≤–µ–±–∫–∞–º,–æ—Ñ—ñ—Å–∏.\n- –û—Ä–µ–Ω–¥–∞ –∞–∫–∞—É–Ω—Ç—ñ–≤.\n–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–æ—Å–æ–≤–Ω–æ –∫—É–ø—ñ–≤–ª—ñ —Ä–µ–∫–ª–∞–º–∏.",
                                                                      reply_to_message_id=message.message_id)
                await asyncio.sleep(15)
                try:
                    await message.delete()
                except Exception as e:
                    pass
                await asyncio.sleep(3)
                try:
                    await bot_helper_promoter.delete_message(mess_warning.chat.id, mess_warning.message_id)
                except Exception as e:
                    print(e)
    except Exception as e:
        print(e)

async def rm_invite_message(event):
    #–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ç—Ä–µ–±—É –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —á–∞—Ç—É
    try:
        message_for_delete = await event.answer(
            f"""<a href="tg://user?id={event.from_user.id}">{event.from_user.full_name}</a>, –ª–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ —á–∞—Ç—É {event.chat.full_name}.\n –í –∑–≤'—è–∑–∫—É –∑ –ø–æ—Å—Ç—ñ–π–Ω–∏–º –Ω–∞–ø–ª–∏–≤–æ–º —Å–ø–∞–º–µ—Ä—ñ–≤ —Ç–∞ —à–∞—Ö—Ä–∞—ó–≤, –±–æ—Ç—ñ–≤, –º–∏ –ø—ñ–¥–∫–ª—é—á–∏–ª–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞—Ö–∏—Å—Ç üõ°, —â–æ–± –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç:\n<b>–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞(–≤–∞—à–æ–≥–æ –¥—Ä—É–≥–∞ –∞–±–æ –∑–Ω–∞–π–æ–º–æ–≥–æ, –±—É–¥—å-–∫–æ–≥–æ) –¥–æ —Ü—å–æ–≥–æ —á–∞—Ç—É, –¥—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—èü§ù!</b>""",
            parse_mode=ParseMode.HTML)
        waiting_time = random.randint(45, 120)
        await asyncio.sleep(waiting_time)
        await message_for_delete.delete()
    except Exception as e:
        print(e)
@router.chat_member(
    ChatMemberUpdatedFilter(JOIN_TRANSITION),
)
async def welcome(event: ChatMemberUpdated) -> Any:
    #—Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤—Å—Ç—É–ø –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    try:
        if event.from_user.id != event.new_chat_member.user.id:
            restricted_permissions = types.ChatPermissions(can_send_messages=True, can_invite_users=True,can_send_photos=True, can_send_documents=True)
            await event.bot.restrict_chat_member(chat_id=event.chat.id, user_id=event.from_user.id,
                                                 permissions=restricted_permissions)
            await event.bot.send_message(chat_id=-1002155533730,text=f"—é–∑–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–≤ —ñ–Ω—à–æ–≥–æ —é–∑–µ—Ä–∞ {event.from_user.full_name} -> {event.new_chat_member.user.full_name} –¥–æ —á–∞—Ç—É {event.chat.full_name}")

        else:
            restricted_permissions = types.ChatPermissions(can_send_messages=False,can_invite_users=True)
            await event.bot.restrict_chat_member(chat_id=event.chat.id,user_id=event.from_user.id, permissions = restricted_permissions)
            print(f"—é–∑–µ—Ä –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç—É–ø–∏–≤ - {event.from_user.full_name}")
            await event.bot.send_message(chat_id=-1002155533730,text=f"—é–∑–µ—Ä –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç—É–ø–∏–≤ - {event.from_user.full_name} —á–∞—Ç {event.chat.full_name}")
            asyncio.create_task(rm_invite_message(event))
    except Exception as e:
        pass

@router.channel_post()
async def set_new_channel_message(message: types.Message) -> None:
    # –ø–∞—Ä—Å–∏–º –æ—Ç—Å—é–¥–∞, —Å–µ–π–≤–∏–º –∞–π–¥–∏ –ø–æ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥,
    # –≤ –±–¥ –º—ã –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π(–¥–µ–¥–ª–∞–π–Ω) –∏ —Ç–∞–∫ –∂–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —á–∞—Ç
    await PromotionPost(message_id=message.message_id, chat_message_id=message.chat.id).asave()


@router.message()
async def read_messages(message: types.Message) -> None:
    try:
        spamfilterCall = asyncio.create_task(spam_filter_search(message))
        # –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è —á–∞—Ç—É, –¥–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è, –∞–±–∏ –∑–º—É—à—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å—É–≤–∞—Ç–∏ —Å–∞–º–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —á–∞—Ç/–∫–∞–Ω–∞–ª
        chat_id = message.chat.id
        db_chat = Chat.objects.filter(chat_id=chat_id).first()
        if db_chat is not None:
            community = db_chat.get_community_for_subscribe()
            if community is not None:
                task = asyncio.create_task(
                    remove_message(message, community.subscribe_chat.chat_id, community.subscribe_link))

        if chat_id not in messages_counter:
            messages_counter[chat_id] = 0
        messages_counter[chat_id] += 1
        if messages_counter[chat_id] % 6 == 0:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫—Ä–∞—Ç–Ω–∞ 5
            # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ä–µ–∫–ª–∞–º–∏ —É –≤–∏–≥–ª—è–¥—ñ –∫–Ω–æ–ø–æ–∫
            buttonPromotionTask = asyncio.create_task(publish_buttons_post(message, db_chat, chat_id))

        if messages_counter[chat_id] % 16 == 0:
            promotionPostTask = asyncio.create_task(publish_promotion_posts(message, db_chat))

    except Exception as e:
        traceback.print_exc()
        # But not all the types is supported to be copied so need to handle it
        pass


async def runner() -> None:
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp.include_router(router)
    # And the run events dispatching
    await dp.start_polling(bot,allowed_updates=["chat_member"])


def main():
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(runner())
